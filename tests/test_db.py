import pytest
from sqlalchemy import text
from app.database import engine
from app.config import settings

@pytest.mark.asyncio
async def test_connection():
    try:
        # Tente de cr√©er une connexion et d'ex√©cuter une requ√™te simple
        async with engine.connect() as connection:
            result = await connection.execute(text("SELECT 1"))
            print("‚úÖ Connexion √† la base de donn√©es r√©ussie!")
            
            # Affiche la version de PostgreSQL
            version_result = await connection.execute(text("SELECT version()"))
            version_text = version_result.scalar()  # Pas besoin d'await ici
            print(f"üìä Version PostgreSQL: {version_text}")
            
            # Affiche les informations de connexion (sans le mot de passe)
            print(f"üîå Connexion √† : {settings.DB_HOST}:{settings.DB_PORT}/{settings.DB_NAME}")
            print(f"üë§ Utilisateur : {settings.DB_USER}")
            
    except Exception as e:
        print("‚ùå Erreur de connexion √† la base de donn√©es:")
        print(f"Type d'erreur : {type(e).__name__}")
        print(f"Message d'erreur : {str(e)}")
        print("\nV√©rifiez que :")
        print("1. La base de donn√©es est en cours d'ex√©cution")
        print("2. Les informations de connexion dans .env sont correctes")
        print("3. Le pare-feu autorise la connexion au port sp√©cifi√©")
        print("4. L'utilisateur a les permissions n√©cessaires")
        raise  # Rel√®ve l'exception pour que pytest puisse la capturer

if __name__ == "__main__":
    pytest.main() 